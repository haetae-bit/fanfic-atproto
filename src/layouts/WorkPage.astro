---
import { didToHandle } from "@/lib/atproto";
import Layout from "./Layout.astro";
import type { Chapter, Tag, User, Work } from "@/lib/types";

interface Props {
  work: Work;
  user: User;
  chapters?: Chapter[];
  comments?: boolean;
}

const { work, user, comments, chapters } = Astro.props;
const author = user.nickname ? user.nickname : await didToHandle(work.author);
const tags = Array.isArray(work.tags) && Object.groupBy(work.tags as Tag[], ({ type }) => type);
---
<Layout title={`${work.title} by ${author}`} skipLink="work-body">
  <!-- this chapter menu should be componentized -->
  <nav id="work-menu">
    <!-- if theres more than one chapter, render this box -->
    <select name="chapterSelect" id={`${work.slug}-chapters`} class="select">
      <option value="default" selected>Choose chapter...</option>
      {chapters?.map(chapter => (
        <option value={`/works/${work.slug}/${chapter.id}`}>{chapter.title}</option>
      ))}
    </select>
  </nav>

  <main id="work-body">
    <header>
      <h1>{work.title}</h1>
      <h2>{author}</h2>
      <!-- replace this at some point -->
      <aside>
        <dl>
          {tags && Object.entries(tags).map(types => (
            <dt>{types[0]}</dt>
            <>
              {types[1].map(tag => (
                <dd><a href={`${tag.slug}`}>{tag.label}</a></dd>
              ))}
            </>
          ))}
        </dl>
      </aside>
      <time datetime={work.createdAt.toISOString()}>
        {work.createdAt}
      </time>
      {work.updatedAt && (
        <time datetime={work.updatedAt.toISOString()}>
          {work.updatedAt}
        </time>
      )}

      <aside id="summary">
        <Fragment set:html={work.summary} />
      </aside>
    </header>
    
    <section id={`${work.slug}-content`}>
      <slot />
    </section>

    {comments && (
      <aside id={`${work.slug}-comments`}>
        <!-- use bsky api to render comments here -->
        <!-- paginate this -->
      </aside>
    )}
  </main>
</Layout>