---
interface Props {
  id?: string;
  label: string;
  icon?: "info" | "warning" | "danger" | string;
  title?: string;
  class?: string;
  color?: "primary" | "secondary" | "accent" | "neutral" | "info" | "warning" | "danger" | "success";
}

const { id, label, icon, title, color, class: className, ...rest } = Astro.props;
---
<!-- type button needs to be set here, otherwise it doesn't work inside forms -->
<button
  type="button" 
  id={`${id}-trigger`} 
  class:list={[
    "btn btn-xs",
    color && [`btn-${color}`], 
    icon && ["btn-circle", "btn-ghost"],
    "popover-btn"
  ]} 
  aria-describedby={id}
  popovertarget={id}
>
  {icon
    ? <div 
        class:list={[
          "icon",
          icon &&
            (icon === "info") ? "i-lc-info text-info" :
            (icon === "warning") ? "i-lc-triangle-alert text-warning" :
            (icon === "danger") ? "i-lc-skull text-error" :
          `i-lc-${icon} text-base-content`,
        ]} 
        aria-label={label}
      />
    : <span>{label}</span>
  }
</button>

<div
  {id} 
  class:list={[
    "popover-content dropdown card w-72 bg-base-100 shadow shadow-inherit",
    className,
  ]} 
  role="tooltip" 
  popover="auto" 
  {...rest} 
>
  <div class="card-body">
    {title && (
      <h3 class="card-title">{title}</h3>
    )}
    
    <slot />
  </div>
</div>

<style define:vars={{ anchor: `--${id}-anchor` }}>
  .icon {
    width: inherit;
    height: inherit;
  }

  .popover-btn {
    @supports (anchor-name: var(--anchor)) {
      anchor-name: var(--anchor);
    }
  }

  .popover-content {
    @supports (position-anchor: var(--anchor)) and (left: anchor(center)) {
      position-anchor: var(--anchor);
      left: anchor(center);
      transform: translateX(-50%);
    }
  }
</style>

<script>
  import { computePosition, autoUpdate, shift, flip } from "@floating-ui/dom";
  const triggers = document.querySelectorAll(".popover-btn");
  
  triggers.forEach(trigger => {
    const btn = trigger as HTMLButtonElement;
    const popover = btn.popoverTargetElement as HTMLElement;
    
    btn.addEventListener("click", (e) => {
      e.preventDefault();
      popover.togglePopover();
    });
    
    popover.addEventListener("toggle", (e) => {
      const cleanup = autoUpdate(
        btn, 
        popover, 
        () => {
          computePosition(btn, popover, {
            middleware: [
              flip(),
              shift({
                crossAxis: false,
              }),
            ],
          }).then(({ placement, middlewareData }) => {
            Object.assign(popover.style, {
              top: `anchor(${placement})`,
              ...(placement === "top") && {
                transform: (middlewareData.shift?.enabled.x) 
                  ? `translate(calc(-50% + ${middlewareData.shift.x}px), -100%)`
                  : `translate(-50%, -100%)`,
              },
            });
          });
        });
      (e.newState === "open") ? cleanup : cleanup();
    });
  });
</script>