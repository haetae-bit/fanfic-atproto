---
import { Info, TriangleAlert, Skull } from "@lucide/astro";

interface Props {
  id?: string;
  label: string;
  icon?: "info" | "warning" | "danger";
  title?: string;
  class?: string;
}

const { id, label, icon, title, class: className, ...rest } = Astro.props;
---
<!-- type button needs to be set here, otherwise it doesn't work inside forms -->
<button
  type="button" 
  id={`${id}-trigger`} 
  class:list={[
    "btn btn-xs", 
    icon && ["btn-circle", "btn-ghost"],
    icon &&
      (icon === "info") ? "text-info" :
      (icon === "warning") ? "text-warning" :
      (icon === "danger") ? "text-error" :
      "text-base-content",
    "popover-btn"
  ]} 
  aria-describedby={id}
  popovertarget={id}
>
  {icon
    ? 
      <div class="icon" aria-label={label}>
        {icon &&
          (icon === "info") ? <Info /> :
          (icon === "warning") ? <TriangleAlert /> :
          (icon === "danger") ? <Skull /> :
          <></>
        }
      </div>
    : <span>{label}</span>
  }
</button>

<div
  {id} 
  class:list={[
    "popover-content",
    className,
  ]} 
  role="tooltip"  
  popover="auto" 
  {...rest} 
>
  <div class="card-body">
    {title && (
      <h3 class="card-title">{title}</h3>
    )}
    
    <slot />
  </div>
</div>

<style define:vars={{ anchor: `--${id}-anchor` }}>
  @reference "../assets/styles/global.css";

  .popover-btn {
    @supports (anchor-name: var(--anchor)) {
      anchor-name: var(--anchor);
    }
  }

  .popover-content {
    @apply dropdown card mx-0 inset-auto bg-base-100 w-72 shadow;

    @supports (position-anchor: var(--anchor)) and (left: anchor(center)) {
      position-anchor: var(--anchor);
      left: anchor(center);
      transform: translateX(-50%);
    }
  }
</style>

<script>
  import { computePosition, autoUpdate, shift, flip } from "@floating-ui/dom";
  const triggers = document.querySelectorAll(".popover-btn");
  
  triggers.forEach(trigger => {
    const btn = trigger as HTMLButtonElement;
    // triggering button will always end with "-trigger"
    // so slice that from the id
    const id = btn.id.slice(0, -8);
    const popover = document.getElementById(`${id}`) as HTMLElement;
    
    btn.addEventListener("click", (e) => {
      e.preventDefault();
      popover.togglePopover();
    });

    popover.addEventListener("toggle", (e) => {
      const cleanup = autoUpdate(
        btn, 
        popover, 
        () => {
          computePosition(btn, popover, {
            middleware: [
              flip(),
              shift({
                crossAxis: false,
              }),
            ],
          }).then(({ placement, middlewareData }) => {
            Object.assign(popover.style, {
              top: `anchor(${placement})`,
              ...(placement === "top") && {
                transform: (middlewareData.shift?.enabled.x) 
                  ? `translate(calc(-50% + ${middlewareData.shift.x}px), -100%)`
                  : `translate(-50%, -100%)`,
              },
            });
          });
        });
      if (e.newState === "open") {
        cleanup;
      } else {
        cleanup();
      }
    });
  });
</script>