---
import Layout from "@/layouts/Layout.astro";
import { didToHandle } from "@/lib/atproto";
import type { User, Work as WorkType } from "@/lib/types";
import { db, eq, Users, Works } from "astro:db";
import Work from "~/Work.astro";

const { userDid } = Astro.params;
const did = userDid!;

const rows = await db.select()
  .from(Users)
  .where(eq(Users.userDid, did))
  .leftJoin(Works, eq(Works.author, did))
  .all();

if (rows.length === 0) {
  return Astro.redirect("/errors/not-found");
}

const result = rows.reduce<Record<string, { user: User; works: WorkType[]; }>>((acc, row) => {
  const user = row.Users;
  const work = row.Works;

  if (!acc[user.userDid]) { acc[user.userDid] = { user, works: [] }; }
  if (work) { acc[user.userDid].works.push(work); }
  return acc;
}, {});

const { user, works } = result[did];
works.sort((a, b) => {
  return (b.updatedAt ?? b.createdAt).valueOf() - (a.updatedAt ?? a.createdAt).valueOf();
});
---
<Layout>
  <h1>{user.nickname ? user.nickname : await didToHandle(user.userDid)}</h1>

  {works && (
    <section>
      <ol>
        {works.map(work => (
          <li>
            <Work work={work} user={user} />
          </li>
        ))}
      </ol>
    </section>
  )}
</Layout>