---
import Layout from "@/layouts/Layout.astro";
import { isInputError } from "astro:actions";
import { actions } from "astro:actions";
import { db, eq, Users, Works } from "astro:db";

const { workId } = Astro.params;
const loggedInUser = Astro.locals.loggedInUser;

// the work could be fetched from the database or from the pds
// would this potentially lighten db load? maybe
const [work] = await db.select()
  .from(Works)
  .where(eq(Works.slug, workId!))
  .innerJoin(Users, eq(Works.author, Users.userDid))
  .limit(1);

if (!work) {
  return Astro.redirect("/not-found");
}

if (!loggedInUser) {
  return Astro.redirect("/login");
}

if (work.Users.userDid !== loggedInUser.did) {
  return Astro.redirect("/unauthorized");
}

const result = Astro.getActionResult(actions.worksActions.updateWork);
const errors = isInputError(result?.error) ? result.error.fields : {};
---
<Layout skipLink={`edit-${workId}`}>
  <main id={`edit-${workId}`}>
    <form action={actions.worksActions.updateWork} method="post">
      <label for="title">title</label>
      <input 
        type="text" 
        name="title" 
        id="title" 
        aria-describedby="title-error" 
        value={work.Works.title}  
        required 
        transition:persist
      />
      {errors.title && (
        <div id="title-error">
          {errors.title}
        </div>
      )}

      <label for="tags">add tags</label>
      <input
        type="text" 
        list="tags-list" 
        name="tags" 
        id="tags" 
        aria-describedby="tags-error"
        value={work.Works.tags as string} 
        transition:persist 
      />
      <!-- could be cool to fetch tags from a tags server or smth? idk -->
      <datalist id="tags-list">
        <option value="test">here</option>
        <option value="tag2">another</option>
        <option value="tag3">try them all!</option>
      </datalist>
      {errors.tags && (
        <div id="tags-error">
          {errors.tags}
        </div>
      )}

      <label for="content">body</label>
      <textarea name="content" id="content" aria-describedby="content-error" transition:persist>
        {work.Works.content}
      </textarea>
      {errors.content && (
        <div id="content-error">
          {errors.content}
        </div>
      )}
      
      <button>submit</button>
    </form>

    {result?.error && (
      <div class="error">
        {result.error.message}
      </div>
    )}
  </main>
</Layout>