---
import Layout from "@/layouts/Layout.astro";
import { isInputError } from "astro:actions";
import { actions } from "astro:actions";
import { db, eq, Users, Works } from "astro:db";

const { workId } = Astro.params;
const loggedInUser = Astro.locals.loggedInUser;

const [work] = await db.select()
  .from(Works)
  .where(eq(Works.slug, workId!))
  .innerJoin(Users, eq(Works.author, Users.userDid))
  .limit(1);

if (!work) {
  return Astro.redirect("/errors/not-found");
}

if (!loggedInUser) {
  return Astro.redirect(`/works/${workId}`);
}

if (work.Users.userDid !== loggedInUser.did) {
  return Astro.redirect("/errors/unauthorized");
}

const result = Astro.getActionResult(actions.worksActions.updateWork);
const errors = isInputError(result?.error) ? result.error.fields : {};
---
<Layout skipLink={`edit-${workId}`}>
  <main id={`edit-${workId}`}>
    <form action={actions.worksActions.updateWork} method="post">
      <fieldset class="fieldset">
        <label for="title" class="label">Title</label>
        <input 
          type="text" 
          name="title" 
          id="title" 
          class="input w-full"
          aria-describedby="title-error" 
          value={work.Works.title}  
          required 
          transition:persist
        />
        {errors.title && (
          <div id="title-error">
            {errors.title}
          </div>
        )}
      </fieldset>

      <fieldset class="fieldset">
        <label for="tags" class="label">Add tags</label>
        <input
          type="text" 
          list="tags-list" 
          name="tags" 
          id="tags" 
          class="input"
          aria-describedby="tags-error"
          value={work.Works.tags as string} 
          transition:persist 
        />
        <!-- could be cool to fetch tags from a tags server or smth? idk -->
        <datalist id="tags-list">
          <option value="test">here</option>
          <option value="tag2">another</option>
          <option value="tag3">try them all!</option>
        </datalist>
        {errors.tags && (
          <div id="tags-error">
            {errors.tags}
          </div>
        )}
      </fieldset>

      <fieldset class="fieldset">
        <label for="content" class="label">Body</label>
        <textarea 
          name="content" 
          id="content" 
          class="textarea" 
          aria-describedby="content-error" 
          transition:persist
        >
          {work.Works.summary.trim()}
        </textarea>
        {errors.summary && (
          <div id="content-error">
            {errors.summary}
          </div>
        )}
      </fieldset>
      
      <button class="btn btn-primary">Submit</button>
    </form>

    {result?.error && (
      <div class="error">
        {result.error.message}
      </div>
    )}
  </main>
</Layout>